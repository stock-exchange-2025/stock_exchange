"""Initial migration

Revision ID: de0758422a10
Revises: 
Create Date: 2025-05-08 20:32:58.984727

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = 'de0758422a10'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('instruments',
    sa.Column('id', sa.Uuid(), nullable=False),
    sa.Column('ticker', sa.String(length=20), nullable=False),
    sa.Column('name', sa.String(length=100), nullable=False),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('ticker')
    )
    op.create_table('users',
    sa.Column('id', sa.Uuid(), nullable=False),
    sa.Column('username', sa.String(length=100), nullable=False),
    sa.Column('role', sa.Enum('user', 'admin', name='userrole'), nullable=False),
    sa.Column('api_key', sa.String(length=512), nullable=False),
    sa.Column('created_at', sa.DateTime(), server_default=sa.text('CURRENT_TIMESTAMP'), nullable=True),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('api_key'),
    sa.UniqueConstraint('username')
    )
    op.create_table('balances',
    sa.Column('id', sa.Uuid(), nullable=False),
    sa.Column('user_id', sa.Uuid(), nullable=False),
    sa.Column('instrument_id', sa.Uuid(), nullable=False),
    sa.Column('amount', sa.DECIMAL(precision=20, scale=8), nullable=False),
    sa.Column('locked_amount', sa.DECIMAL(precision=20, scale=8), nullable=False),
    sa.CheckConstraint('amount >= 0', name='check_amount_positive'),
    sa.CheckConstraint('locked_amount >= 0', name='check_locked_amount_positive'),
    sa.ForeignKeyConstraint(['instrument_id'], ['instruments.id'], ondelete='RESTRICT'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('user_id', name='uq_user_balance')
    )
    op.create_table('orders',
    sa.Column('id', sa.Uuid(), nullable=False),
    sa.Column('user_id', sa.Uuid(), nullable=False),
    sa.Column('instrument_id', sa.Uuid(), nullable=False),
    sa.Column('order_type', sa.Enum('market', 'limit', name='ordertype'), nullable=False),
    sa.Column('direction', sa.Enum('buy', 'sell', name='direction'), nullable=False),
    sa.Column('price', sa.DECIMAL(precision=20, scale=8), nullable=True),
    sa.Column('quantity', sa.DECIMAL(precision=20, scale=8), nullable=False),
    sa.Column('filled_quantity', sa.DECIMAL(precision=20, scale=8), nullable=False),
    sa.Column('status', sa.Enum('new', 'executed', 'partially_filled', 'canceled', name='orderstatus'), nullable=False),
    sa.Column('created_at', sa.DateTime(), server_default=sa.text('CURRENT_TIMESTAMP'), nullable=True),
    sa.Column('updated_at', sa.DateTime(), server_default=sa.text('CURRENT_TIMESTAMP'), nullable=True),
    sa.CheckConstraint("(price > 0 AND order_type = 'limit') OR (order_type = 'market')", name='check_price'),
    sa.CheckConstraint('filled_quantity >= 0 AND filled_quantity <= quantity', name='check_filled_quantity'),
    sa.CheckConstraint('quantity > 0', name='check_quantity_positive'),
    sa.ForeignKeyConstraint(['instrument_id'], ['instruments.id'], ondelete='RESTRICT'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('transactions',
    sa.Column('id', sa.Uuid(), nullable=False),
    sa.Column('order_id', sa.Uuid(), nullable=True),
    sa.Column('instrument_id', sa.Uuid(), nullable=False),
    sa.Column('price', sa.DECIMAL(precision=20, scale=8), nullable=False),
    sa.Column('quantity', sa.DECIMAL(precision=20, scale=8), nullable=False),
    sa.Column('executed_at', sa.DateTime(), server_default=sa.text('CURRENT_TIMESTAMP'), nullable=True),
    sa.CheckConstraint('price > 0', name='check_price_positive'),
    sa.CheckConstraint('quantity > 0', name='check_quantity_positive'),
    sa.ForeignKeyConstraint(['instrument_id'], ['instruments.id'], ondelete='RESTRICT'),
    sa.ForeignKeyConstraint(['order_id'], ['orders.id'], ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('id')
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('transactions')
    op.drop_table('orders')
    op.drop_table('balances')
    op.drop_table('users')
    op.drop_table('instruments')
    # ### end Alembic commands ###
